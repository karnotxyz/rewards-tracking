generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================================================
// =========================== Pre Processed Models ================================
// =================================================================================

model deposits {
  block_number Int
  tx_index     Int @default(0)
  event_index  Int @default(0)
  timestamp    Int

  sender String
  owner  String
  assets Decimal @db.Decimal(30, 0)
  shares Decimal @db.Decimal(30, 0)

  referrer String?

  cursor BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
}

model transfer {
  block_number Int
  tx_index     Int    @default(0)
  event_index  Int    @default(0)
  timestamp    String

  from   String
  to     String
  value  Decimal @db.Decimal(30, 0)
  cursor BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
}

model withdrawals {
  block_number Int
  tx_index     Int    @default(0)
  event_index  Int    @default(0)
  timestamp    String

  sender   String
  receiver String
  owner    String
  assets   Decimal @db.Decimal(30, 0)
  shares   Decimal @db.Decimal(30, 0)

  cursor BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
}

// =================================================================================
// ========================== Post Processed Models ================================
// =================================================================================

enum TransactionType {
  DEPOSIT    @map("deposit")
  WITHDRAWAL @map("withdrawal")
}

// Used for storing deposits, withdrawals in a ledger format
model Ledger {
  id String @id @default(uuid()) @db.Uuid

  block_number  Int
  tx_index      Int             @default(0)
  event_index   Int             @default(0)
  order_index   Int // Used for ordering partial fills of withdrawals with deposits, is @unique in (block_number, event_index, event_index)
  user          String
  amount        Decimal         @db.Decimal(30, 0) // xstrk amount
  type          TransactionType
  referral_code String?
  Commissions   Commissions[]

  @@unique([block_number, tx_index, event_index, order_index])
}

// Exchange rate of strk/xstrk at a given block number
model ExchangeRate {
  block_number Int     @id
  rate         Decimal @db.Decimal(30, 18)
}

// Commissions for each referral code till the particular ledger_id
model Commissions {
  id BigInt @id @default(autoincrement())
  // Referrer Foreign relation
  referrer      Referrers @relation(fields: [referral_code], references: [referral_code])
  referral_code String

  commission_amount Decimal @db.Decimal(30, 0)
  is_paid           Boolean @default(false)

  // Ledger Foreign relation
  ledger    Ledger @relation(fields: [ledger_id], references: [id])
  ledger_id String @db.Uuid

  @@unique([ledger_id, referral_code])
}

model Referrers {
  referral_code String        @id
  referrer      String        @unique
  percentage    Float
  Commissions   Commissions[]
}

enum EventType {
  DEPOSIT    @map("deposit")
  WITHDRAWAL @map("withdrawal")
  TRANSFER   @map("transfer")
}

// The rows from `deposit`, `withdrawal` and `transfer`
// for which ledger entries have been created
model ProcessedState {
  type         EventType @unique
  block_number Int
  tx_index     Int
  event_index  Int
}
